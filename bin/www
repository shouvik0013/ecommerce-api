#!/usr/bin/env node

const path = require("path");
const http = require('http');
const mongoose = require("mongoose");
require("dotenv").config({
  path: path.join(__dirname, '..', '.env', `.${process.env.NODE_ENV}.env`),
});
const app = require("../app");



const port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

const server = http.createServer(app);

mongoose.connect(process.env.MONGODB_URI).then((result) => {
  // console.log('SERVER STARTED LISTENING');
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})


/**
 * Normalize a port into a number, string, or false
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event
 */
function onListening() {
  const addr = server.address();
  const uri = typeof addr === "string" ? addr : `http://localhost:${addr.port}`;
  console.log(`Listening on ${uri}`);
}
